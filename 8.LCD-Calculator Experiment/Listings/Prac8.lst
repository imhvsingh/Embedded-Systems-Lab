C51 COMPILER V9.60.7.0   PRAC8                                                             03/23/2024 11:37:40 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE PRAC8
OBJECT MODULE PLACED IN .\Objects\Prac8.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE Prac8.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\Pra
                    -c8.lst) TABS(2) OBJECT(.\Objects\Prac8.obj)

line level    source

   1          // Interfacing keypad and LCD with 8051 to design a simple calculator..
   2          
   3          #include <regx52.h>
   4          #include <stdio.h>
   5          
   6          void init();
   7          void command(unsigned int);
   8          void write_data(unsigned char);
   9          void delay(unsigned char );
  10          void msDelay(unsigned int);
  11          char process_key(int,int,int,int,char,char,char,char);
  12          void num_generator(char,int *);
  13          void write_result(int,char);
  14          
  15          sbit EN = P3^2; // Enable LCD
  16          sbit RW = P3^3; // Read Write 
  17          sbit RS = P3^4; // Register Select
  18          
  19          void main()
  20          {
  21   1      int i,j,* operand ,operand1=0,operand2=0,result=0;
  22   1      int i_arr[4][4] = {{0,1,1,1},{1,0,1,1},{1,1,0,1},{1,1,1,0}};
  23   1      char pressed_key,operator1='a',negative='N';
  24   1      char c_arr[4][4] = {{'7','4','1','o'},{'8','5','2','0'},{'9','6','3','='},{'/','*','-','+'}},error[10]={'M
             -','A','T','H',' ','E','R','R','O','R'};
  25   1      P1 = 0xff;
  26   1      operand = &operand1;
  27   1      while(1)
  28   1      {
  29   2      for(i=0;i<4;i++)
  30   2       {
  31   3         pressed_key = process_key(i_arr[i][0],i_arr[i][1],i_arr[i][2],i_arr[i][3],c_arr[i][0],c_arr[i][1],c_arr
             -[i][2],c_arr[i][3]);
  32   3         if(pressed_key=='/'||pressed_key=='*'||pressed_key=='-'||pressed_key=='+')
  33   3         {
  34   4          operand = &operand2;
  35   4          operator1 = pressed_key;
  36   4         }
  37   3         if((pressed_key != 'Z')&&(pressed_key!= '=')&&(pressed_key!= '/')&&(pressed_key!= '*')&&(pressed_key!= 
             -'-')&&(pressed_key!= '+'))
  38   3         {
  39   4          num_generator(pressed_key,operand);
  40   4         }
  41   3         // Make a function generate_result
  42   3         if(pressed_key == '=')
  43   3         {
  44   4          // Make a function generate_result in which all the mess below this line will be processed..
  45   4          if(operator1== '*')
  46   4          result = operand1*operand2;
  47   4          
  48   4          if(operator1== '/')
  49   4          if(operand2==0)
  50   4          {
  51   5           command(0xC0);
C51 COMPILER V9.60.7.0   PRAC8                                                             03/23/2024 11:37:40 PAGE 2   

  52   5           for(j=0;j<10;j++)
  53   5           write_data(error[j]);
  54   5           msDelay(500);
  55   5           init();
  56   5          }
  57   4          else
  58   4           result = operand1/operand2;
  59   4          
  60   4          if(operator1== '-')
  61   4          {
  62   5          if (operand1>operand2)
  63   5          result = operand1-operand2;
  64   5          else
  65   5          {
  66   6          result = operand2-operand1;
  67   6          command(0xC0);
  68   6          negative = 'Y';
  69   6          }
  70   5          }
  71   4          
  72   4          if(operator1== '+')
  73   4          result = operand1+operand2;
  74   4          
  75   4          write_result(result,negative);
  76   4         }
  77   3       }
  78   2      }
  79   1      }
  80          
  81          // LCD initilaizer function
  82          void init()
  83          {
  84   1       delay(3500);
  85   1       command(0x38);
  86   1       delay(3500);
  87   1       command(0x38);
  88   1       delay(3500);
  89   1       command(0x38);
  90   1       delay(350);
  91   1       command(0x38);
  92   1       command(0x1C);
  93   1       command(0x0E);
  94   1       command(0x06);
  95   1       command(0x01);
  96   1       delay(3500);
  97   1       command(0x00);
  98   1       main();
  99   1      }
 100          
 101          // Sends different commands to LCD
 102          void command(unsigned int comm)
 103          {
 104   1       RW = 0;
 105   1       RS = 0;
 106   1       P2 = comm;
 107   1       EN = 1;
 108   1       delay(3500);
 109   1       EN = 0;
 110   1      }
 111          
 112          // Process and check the press of key
 113          char process_key(int a,int b,int c,int d,char A,char B,char C,char D)
C51 COMPILER V9.60.7.0   PRAC8                                                             03/23/2024 11:37:40 PAGE 3   

 114          {
 115   1       char ch = 'Z';
 116   1       P1_0=a;
 117   1       P1_1=b;
 118   1       P1_2=c;
 119   1       P1_3=d;
 120   1       
 121   1       if(P1_4==0)
 122   1       {
 123   2        ch = A;
 124   2       }
 125   1       if(P1_5==0)
 126   1       {
 127   2        ch = B;
 128   2       }
 129   1       if(P1_6==0)
 130   1       {
 131   2        ch = C;
 132   2       }
 133   1       if(P1_7==0)
 134   1       {
 135   2        if (D == 'o')
 136   2        init();
 137   2        else
 138   2         ch = D;
 139   2       }
 140   1       if(ch!= 'Z')
 141   1       {
 142   2        write_data(ch);
 143   2        msDelay(100);
 144   2       }
 145   1       return ch;
 146   1      }
 147          
 148          // Used to write data in char on LCD
 149          void write_data(unsigned char ch)
 150          {
 151   1        RW = 0;
 152   1        RS = 1;
 153   1        P2 = ch;
 154   1        EN = 1;
 155   1        delay(3500);
 156   1        EN = 0;
 157   1      }
 158          
 159          void num_generator(char ch,int *operand)
 160          {
 161   1      int digit;
 162   1      digit = ch - '0';
 163   1      *operand = digit + (*operand*10);
 164   1      }
 165          
 166          void write_result(int num,char neg)
 167          {
 168   1       int i=0,j,rem;
 169   1       char rev_num[20];
 170   1       command(0xC0);
 171   1       if(neg == 'Y')
 172   1       {
 173   2       write_data('-');
 174   2       }
 175   1       do
C51 COMPILER V9.60.7.0   PRAC8                                                             03/23/2024 11:37:40 PAGE 4   

 176   1          {
 177   2          rem = num%10;
 178   2          num = num /10;
 179   2          rev_num[i] = (char)rem+'0';
 180   2          i++;
 181   2          }while(num>0);
 182   1        for(j=i-1;j>=0;j--)
 183   1          {
 184   2            RW = 0;
 185   2         RS = 1;
 186   2         P2 = rev_num[j];
 187   2         EN = 1;
 188   2         delay(3500);
 189   2         EN = 0;  
 190   2          }
 191   1      }
 192          
 193          //Function for generation of delay
 194          void delay(unsigned char c)
 195          {
 196   1      unsigned int i;
 197   1      unsigned char j;
 198   1      for(i=0;i<=3;i++)
 199   1      {
 200   2      for(j=0;j<=c;j++); 
 201   2      }
 202   1      }
 203          
 204          // Generates delay in milli seconds
 205          void msDelay(unsigned int time)
 206          {
 207   1       TL0 = 0xEF;     
 208   1       TH0 = 0xAF;      
 209   1       TR0 = 1;
 210   1       while(time--)
 211   1       {
 212   2        while(TF0 == 0);
 213   2        TF0 = 0;
 214   2        TL0 = 0xEF;     
 215   2        TH0 = 0xAF;      
 216   2       }
 217   1       TR0 = 0;
 218   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    955    ----
   CONSTANT SIZE    =     58    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----     116
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
